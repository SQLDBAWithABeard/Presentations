variables:
  location: "westeurope" # location of the resource group use az account list-locations this must be the westeurope type name not the "West Europe" 
  terraform_resource_group_name: ""
  terraform_storage_account: ""
  terraform_storage_key: # will be retrieved by the pipeline
  agent_ip_address: # will be retrieved by the pipeline
  key_vault_resource_group_name: ""
  key_vault_name: ""
  azure-subscription-id: ""
  azure-tenant-id: ""
  azure-client-id: ""

stages:
- stage: Dev_Deployment
  jobs:
    - deployment: deployelasticpooldev   # name of the deployment job, A-Z, a-z, 0-9, and underscore
      displayName: Deploying Elastic Pool Infrastructure to the Dev Environment  # friendly name to display in the UI
      environment: Dev
      pool:
        name: Hosted VS2017
        demands: azureps
      strategy:
        runOnce:
          deploy:
                steps:
                  - checkout: self  # self represents the repo where the initial Azure Pipelines YAML file was found
                    clean: true
                  - task: AzureCLI@1
                    displayName: 'Deploy Azure resource group and storage account for Terraform state'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: inlineScript
                      inlineScript: |
                        # the following script will create Azure resource group, Storage account and a Storage container which will be used to store terraform state
                        call az group create --location $(location) --name $(terraform_resource_group_name)

                        call az storage account create --name $(terraform_storage_account) --resource-group $(terraform_resource_group_name) --location $(location) --sku Standard_LRS

                        call az storage container create --name terraform --account-name $(terraform_storage_account)
                    enabled: false
                  - task: AzurePowerShell@3
                    displayName: 'Retrieve the storage key to enable reading the Terraform state'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      ScriptType: InlineScript
                      Inline: |
                        # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account

                        $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraform_resource_group_name) -AccountName $(terraform_storage_account)).Value[0]

                        Write-Host "##vso[task.setvariable variable=terraform_storage_key]$key"
                        Write-Host "##vso[task.setvariable variable=ARM_ACCESS_KEY]$key"
                      azurePowerShellVersion: LatestVersion
                    enabled: true

                  - task: PowerShell@2
                    name: GetClientIP
                    displayName: Get Client IP from Trusted REST API Service
                    inputs:
                      targetType: 'inline'
                      script: |
                        $resp = Invoke-RestMethod -Uri 'https://afa-aspnet4you.azurewebsites.net/api/GetClientIP'
                        # $ipAddr = $resp only works local to the task! ** setvariable must be used to pass the variable down the pipeline.**
                        Write-Host "##vso[task.setvariable variable=agent_ip_address]$resp"
                        $AgentIPAddress = $resp
                        Write-Host "Agent IP Address is: $agent_ip_address"

                  - task: AzureCLI@1
                    name: AddFirewallRule
                    displayName: Add Firewall Rule to Azure Key Vault (Format @ ip)
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: 'inlineScript'
                      inlineScript: 'az keyvault network-rule add --resource-group $(key_vault_resource_group_name) --name $(key_vault_name) --ip-address $(agent_ip_address)'
                    enabled: true 

                  - task: AzurePowerShell@5
                    displayName: 'Get the azure client secret from Key Vault and set to variable'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      ScriptType: 'InlineScript'
                      Inline: |
                        $VerbosePreference = 'Continue'
                        $clientsecret = (Get-AzKeyVaultSecret -VaultName  -Name azure-client-secret).SecretValueText
                        Write-Host "##vso[task.setvariable variable=azure-client-secret]$clientsecret"
                      azurePowerShellVersion: 'LatestVersion'
                      pwsh: true

                  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                    displayName: 'Replace variables in the terraform files'
                    inputs:
                      rootDirectory: variables
                      targetFiles: |
                        **/*.tf
                        **/*.tfvars
                      tokenPrefix: '__'
                      tokenSuffix: '__'
                    enabled: true
                  - task: PowerShell@2
                    displayName: 'List file contents for troubleshooting - normally disabled'
                    inputs:
                      targetType: 'inline'
                      script: |
                        Write-Host "Directories"
                        Get-ChildItem .\Build -Recurse
                        Get-ChildItem .\variables -Recurse
                        Write-Host "File Contents"
                        Get-Content .\Build\*.tf 
                        Get-Content .\variables\*.tfvars 
                        Write-Host "Environments"
                        Get-ChildItem Env: | select Name,Value
                    enabled: false
                      
                  - task: Terraform@2
                    displayName: 'Initialise Terraform'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'init -backend-config="..\variables\dev-backend-config.tfvars"'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false

                  - task: Terraform@2
                    displayName: 'Create Terraform dev workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'workspace new dev'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                    enabled: false
                    continueOnError: true  

                  - task: Terraform@2
                    displayName: 'Select Terraform dev workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'workspace select dev'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                    enabled: true

                  - task: Terraform@2
                    displayName: 'Plan Terraform for dev workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'plan -var-file="..\variables\dev-backend-config.tfvars"'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false

                  - task: Terraform@2
                    displayName: 'Apply Terraform for dev workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'apply -var-file="..\variables\dev-backend-config.tfvars" -auto-approve'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                  
                  - task: AzureCLI@1
                    name: RemoveFirewallRule
                    displayName: Remove Firewall Rule from Azure Key Vault (Format @ ip/32)
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: 'inlineScript'
                      inlineScript: 'az keyvault network-rule remove --resource-group $(key_vault_resource_group_name) --name $(key_vault_name) --ip-address $(agent_ip_address)/32'
                    enabled: true
                    condition: always() # we always want this to run so we know the firewall rule was removed          
    
- stage: Test_Deployment
  jobs:
    - deployment: deployelasticpooltest   # name of the deployment job, A-Z, a-z, 0-9, and underscore
      displayName: Deploying Elastic Pool Infrastructure to the Test Environment  # friendly name to display in the UI
      environment: Test
      pool:
        name: Hosted VS2017
        demands: azureps
      strategy:
        runOnce:
          deploy:
                steps:
                  - checkout: self  # self represents the repo where the initial Azure Pipelines YAML file was found
                    clean: true
                  - task: AzureCLI@1
                    displayName: 'Deploy Azure resource group and storage account for Terraform state'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: inlineScript
                      inlineScript: |
                        # the following script will create Azure resource group, Storage account and a Storage container which will be used to store terraform state
                        call az group create --location $(location) --name $(terraform_resource_group_name)

                        call az storage account create --name $(terraform_storage_account) --resource-group $(terraform_resource_group_name) --location $(location) --sku Standard_LRS

                        call az storage container create --name terraform --account-name $(terraform_storage_account)
                    enabled: false

                  - task: AzurePowerShell@3
                    displayName: 'Retrieve the storage key to enable reading the Terraform state'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      ScriptType: InlineScript
                      Inline: |
                        # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account

                        $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraform_resource_group_name) -AccountName $(terraform_storage_account)).Value[0]

                        Write-Host "##vso[task.setvariable variable=terraform_storage_key]$key"
                        Write-Host "##vso[task.setvariable variable=ARM_ACCESS_KEY]$key"
                      azurePowerShellVersion: LatestVersion

                  - task: PowerShell@2
                    name: GetClientIP
                    displayName: Get Client IP from Trusted REST API Service
                    inputs:
                      targetType: 'inline'
                      script: |
                        $resp = Invoke-RestMethod -Uri 'https://afa-aspnet4you.azurewebsites.net/api/GetClientIP'
                        # $ipAddr = $resp only works local to the task! ** setvariable must be used to pass the variable down the pipeline.**
                        Write-Host "##vso[task.setvariable variable=agent_ip_address]$resp"
                        $AgentIPAddress = $resp
                        Write-Host "Agent IP Address is: $agent_ip_address"

                  - task: AzureCLI@1
                    name: AddFirewallRule
                    displayName: Add Firewall Rule to Azure Key Vault (Format @ ip)
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: 'inlineScript'
                      inlineScript: 'az keyvault network-rule add --resource-group $(key_vault_resource_group_name) --name $(key_vault_name) --ip-address $(agent_ip_address)'
                    enabled: true 

                  - task: AzurePowerShell@5
                    displayName: 'Get the azure client secret from Key Vault and set to variable'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      ScriptType: 'InlineScript'
                      Inline: |
                        $VerbosePreference = 'Continue'
                        $clientsecret = (Get-AzKeyVaultSecret -VaultName  -Name azure-client-secret).SecretValueText
                        Write-Host "##vso[task.setvariable variable=azure-client-secret]$clientsecret"
                      azurePowerShellVersion: 'LatestVersion'
                      pwsh: true
                    enabled: true

                  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                    displayName: 'Replace variables in the terraform files'
                    inputs:
                      rootDirectory: variables
                      targetFiles: |
                        **/*.tf
                        **/*.tfvars
                      tokenPrefix: '__'
                      tokenSuffix: '__'
                    enabled: true

                  - task: PowerShell@2
                    displayName: 'List file contents for troubleshooting - normally disabled'
                    inputs:
                      targetType: 'inline'
                      script: |
                        Write-Host "Directories"
                        Get-ChildItem .\Build -Recurse
                        Get-ChildItem .\variables -Recurse
                        Write-Host "File Contents"
                        Get-Content .\Build\*.tf 
                        Get-Content .\variables\*.tfvars 
                        Write-Host "Environments"
                        Get-ChildItem Env: | select Name,Value
                    enabled: false
                      
                  - task: Terraform@2
                    displayName: 'Initialise Terraform'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'init -backend-config="..\variables\dev-backend-config.tfvars"'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false

                  - task: Terraform@2
                    displayName: 'Create Terraform Test workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'workspace new test'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                    enabled: false
                    continueOnError: true         
                  - task: Terraform@2
                    displayName: 'Select Terraform dev workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'workspace select test'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                    enabled: true
                  - task: Terraform@2
                    displayName: 'Plan Terraform for test workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'plan -var-file="..\variables\dev-backend-config.tfvars"'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                  - task: Terraform@2
                    displayName: 'Apply Terraform for test workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'apply -var-file="..\variables\dev-backend-config.tfvars" -auto-approve'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false

                  - task: AzureCLI@1
                    name: RemoveFirewallRule
                    displayName: Remove Firewall Rule from Azure Key Vault (Format @ ip/32)
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: 'inlineScript'
                      inlineScript: 'az keyvault network-rule remove --resource-group $(key_vault_resource_group_name) --name $(key_vault_name) --ip-address $(agent_ip_address)/32'
                    enabled: true
                    condition: always() # we always want this to run so we know the firewall rule was removed                      

- stage: Production_Deployment
  jobs:
    - deployment: deployelasticpoolprod   # name of the deployment job, A-Z, a-z, 0-9, and underscore
      displayName: Deploying Elastic Pool Infrastructure to the Production Environment  # friendly name to display in the UI
      environment: Prod
      pool:
        name: Hosted VS2017
        demands: azureps
      strategy:
        runOnce:
          deploy:
                steps:
                  - checkout: self  # self represents the repo where the initial Azure Pipelines YAML file was found
                    clean: true
                  - task: AzureCLI@1
                    displayName: 'Deploy Azure resource group and storage account for Terraform state'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: inlineScript
                      inlineScript: |
                        # the following script will create Azure resource group, Storage account and a Storage container which will be used to store terraform state
                        call az group create --location $(location) --name $(terraform_resource_group_name)

                        call az storage account create --name $(terraform_storage_account) --resource-group $(terraform_resource_group_name) --location $(location) --sku Standard_LRS

                        call az storage container create --name terraform --account-name $(terraform_storage_account)
                    enabled: false
                  - task: AzurePowerShell@3
                    displayName: 'Retrieve the storage key to enable reading the Terraform state'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      ScriptType: InlineScript
                      Inline: |
                        # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account

                        $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraform_resource_group_name) -AccountName $(terraform_storage_account)).Value[0]

                        Write-Host "##vso[task.setvariable variable=terraform_storage_key]$key"
                        Write-Host "##vso[task.setvariable variable=ARM_ACCESS_KEY]$key"
                      azurePowerShellVersion: LatestVersion
                    enabled: true

                  - task: PowerShell@2
                    name: GetClientIP
                    displayName: Get Client IP from Trusted REST API Service
                    inputs:
                      targetType: 'inline'
                      script: |
                        $resp = Invoke-RestMethod -Uri 'https://afa-aspnet4you.azurewebsites.net/api/GetClientIP'
                        # $ipAddr = $resp only works local to the task! ** setvariable must be used to pass the variable down the pipeline.**
                        Write-Host "##vso[task.setvariable variable=agent_ip_address]$resp"
                        $AgentIPAddress = $resp
                        Write-Host "Agent IP Address is: $agent_ip_address"

                  - task: AzureCLI@1
                    name: AddFirewallRule
                    displayName: Add Firewall Rule to Azure Key Vault (Format @ ip)
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: 'inlineScript'
                      inlineScript: 'az keyvault network-rule add --resource-group $(key_vault_resource_group_name) --name $(key_vault_name) --ip-address $(agent_ip_address)'
                    enabled: true 

                  - task: AzurePowerShell@5
                    displayName: 'Get the azure client secret from Key Vault and set to variable'
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      ScriptType: 'InlineScript'
                      Inline: |
                        $VerbosePreference = 'Continue'
                        $clientsecret = (Get-AzKeyVaultSecret -VaultName  -Name azure-client-secret).SecretValueText
                        Write-Host "##vso[task.setvariable variable=azure-client-secret]$clientsecret"
                      azurePowerShellVersion: 'LatestVersion'
                      pwsh: true

                  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                    displayName: 'Replace variables in the terraform files'
                    inputs:
                      rootDirectory: variables
                      targetFiles: |
                        **/*.tf
                        **/*.tfvars
                      tokenPrefix: '__'
                      tokenSuffix: '__'
                    enabled: true

                  - task: PowerShell@2
                    displayName: 'List file contents for troubleshooting - normally disabled'
                    inputs:
                      targetType: 'inline'
                      script: |
                        Write-Host "Directories"
                        Get-ChildItem .\Build -Recurse
                        Get-ChildItem .\variables -Recurse
                        Write-Host "File Contents"
                        Get-Content .\Build\*.tf 
                        Get-Content .\variables\*.tfvars 
                        Write-Host "Environments"
                        Get-ChildItem Env: | select Name,Value
                    enabled: false

                  - task: Terraform@2
                    displayName: 'Initialise Terraform'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'init -backend-config="..\variables\dev-backend-config.tfvars"'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                  - task: Terraform@2
                    displayName: 'Create Terraform Prod workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'workspace new prod'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                    enabled: false
                    continueOnError: true  

                  - task: Terraform@2
                    displayName: 'Select Terraform Prod workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'workspace select prod'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false
                    enabled: true

                  - task: Terraform@2
                    displayName: 'Plan Terraform for prod workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'plan -var-file="..\variables\dev-backend-config.tfvars"'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false

                  - task: Terraform@2
                    displayName: 'Apply Terraform for prod workspace'
                    inputs:
                      TemplatePath: 'Build'
                      Arguments: 'apply -var-file="..\variables\dev-backend-config.tfvars" -auto-approve'
                      InstallTerraform: true
                      UseAzureSub: true
                      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                      ConnectedServiceNameARM: '''  # name of connector in Azure DevOps '
                      ManageState: false

                  - task: AzureCLI@1
                    name: RemoveFirewallRule
                    displayName: Remove Firewall Rule from Azure Key Vault (Format @ ip/32)
                    inputs:
                      azureSubscription: '''  # name of connector in Azure DevOps '
                      scriptLocation: 'inlineScript'
                      inlineScript: 'az keyvault network-rule remove --resource-group $(key_vault_resource_group_name) --name $(key_vault_name) --ip-address $(agent_ip_address)/32'
                    enabled: true
                    condition: always() # we always want this to run so we know the firewall rule was removed

