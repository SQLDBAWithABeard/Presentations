# This is the default template for the admin network resource group

# it will deploy the resource group, 3 virtual network, 9 subnets, and 3 NSG

trigger: none # will disable CI builds (but not PR builds)

parameters:
 - name: azureSubscription
   type: string
   default: beards-service-connection
 - name: location
   type: string
   default: uksouth
 - name: whatIf
   type: boolean
   default: false
 - name: allowBlobPublicAccess # not used just so we can show it in the pipleline
   type: boolean
   default: false
 - name: virtualNetworksSubnets # not used just so we can show it in the pipleline
   type: string # string not array - use 'string','string','string'
   default: nothing

jobs:
  - job: 'Deploy_Dev_Network'
    variables: 
      vNetName: beardvnet-dev
      vNetaddressPrefixes: '10.0.0.0/16'
      subnet1Name: onprem
      subnet1addressPrefix: '10.0.2.0/24'
      subnet2Name: internal
      subnet2addressPrefix: '10.0.3.0/24'
      nsgName: gandalf
    pool:
      vmImage: windows-latest
    steps:
    - checkout: self
      persistCredentials: true
    - task: AzurePowerShell@5
      displayName: Deploy Resource
      inputs:
        azureSubscription: ${{ parameters.azureSubscription }}
        ScriptType: 'InlineScript'
        Inline: |
           $WhatIfParam = '${{ parameters.whatIf }}'
           if($WhatIfParam -eq 'false'){
             $WhatIf = $false
           }else{
             $WhatIf = $true
           }
           ##
           ##         IF I Have boolean or array parameters I need to finagle them as only strings are passed
           ## #boolean params
           ## $allowBlobPublicAccessParam = '${{ parameters.allowBlobPublicAccess }}'
           ## if($allowBlobPublicAccessParam -eq 'false'){
           ##   $allowBlobPublicAccess = $false
           ## }else{
           ##   $allowBlobPublicAccess = $true
           ## }
           ## # array params - these are passed in as 'string','string','string'
           ## $virtualNetworksSubnetsString = '${{ parameters.virtualNetworksSubnets }}'
           ## if($virtualNetworksSubnetsString -ne 'null'){
           ## $virtualNetworksSubnetsArray = $virtualNetworksSubnetsString.Split(',')
           ## } else {
           ##  $virtualNetworksSubnetsArray = @()
           ## }

           Write-Host "What If is set to $WhatIf"

           $date = Get-Date -Format yyyyMMddHHmmsss
           $deploymentname = 'Deploy_DevNetwork_{0}}'  $date # name of the deployment seen in the activity log
           Write-Host "Deployment name is $deploymentname"

           $templateFile = 'Bicep\myCustomResources\AdminNetworkRG.bicep' 
            if(Test-Path $templateFile){
              Write-Host "We have the template file $templateFile"
            }  else {
                Write-Warning "Can't deploy without the templatefile $templateFile"
                [System.Environment]::Exit(1)
              }
            }
            $deploymentConfig = @{
                  Name                                    = $deploymentname
                  TemplateFile                            = $templateFile
                  location                                = ${{ parameters.location }}
                  WhatIf                                  = $WhatIf 
                  vNetName                                = $(vNetName)
                  vNetaddressPrefixes                     = $(vNetaddressPrefixes)
                  subnet1Name                             = $(subnet1Name)
                  subnet1addressPrefix                    = $(subnet1addressPrefix)
                  subnet1Name                             = $(subnet1Name)
                  subnet1addressPrefix                    = $(subnet1addressPrefix)
                  nsgName                                 = $(nsgName)
              }
              $message = "We are deploying with - {0} " -f ($deploymentConfig | Out-String)
              Write-Host $message
              try{
                New-AzDeployment @deploymentConfig 
              } catch {
                Write-Warning "We failed to deploy. Error below"
                $_  | Format-List -Property * -Force
                Write-Warning "Maybe more information here"
                (Get-AzDeploymentOperation -DeploymentName $deploymentname).Properties.response | ConvertTo-Json
                [System.Environment]::Exit(1)
              }
        azurePowerShellVersion: '6.3.0'
      env:
        SYSTEM_ACCESSTOKEN: $(system.accesstoken)
        pwsh: true